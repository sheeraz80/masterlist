version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: development  # Use development stage if multi-stage Dockerfile
    container_name: masterlist-web-dev
    ports:
      - "5000:5000"
      - "5678:5678"  # Python debugger port
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - SECRET_KEY=dev-secret-key-change-in-production
      - REDIS_URL=redis://redis:6379/0
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=DEBUG
    volumes:
      # Mount entire project for hot reload
      - ./:/app
      - /app/venv  # Exclude venv from mount
      - /app/__pycache__  # Exclude cache
    depends_on:
      - redis
    networks:
      - masterlist-network
    command: python web/app.py
    stdin_open: true
    tty: true

  redis:
    image: redis:7-alpine
    container_name: masterlist-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - masterlist-network
    command: redis-server --appendonly yes --loglevel debug

  # Redis Commander for Redis GUI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: masterlist-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - masterlist-network

  # Jupyter for data analysis
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: masterlist-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ./:/app
      - ./notebooks:/app/notebooks
    command: jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token='' --NotebookApp.password=''
    networks:
      - masterlist-network

  # Background workers
  worker-analytics:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: masterlist-worker-analytics
    environment:
      - WORKER_TYPE=analytics
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./:/app
    command: python -c "
      import time
      import subprocess
      while True:
          print('Running analytics reports...')
          subprocess.run(['python', 'analytics/report_generator.py', 'all'])
          time.sleep(3600)  # Run every hour
      "
    depends_on:
      - redis
    networks:
      - masterlist-network

  worker-insights:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: masterlist-worker-insights
    environment:
      - WORKER_TYPE=insights
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./:/app
    command: python -c "
      import time
      import subprocess
      while True:
          print('Generating AI insights...')
          subprocess.run(['python', 'insights/ai_insights.py', '--generate-all'])
          time.sleep(21600)  # Run every 6 hours
      "
    depends_on:
      - redis
    networks:
      - masterlist-network

  # Development database (optional)
  postgres:
    image: postgres:15-alpine
    container_name: masterlist-postgres-dev
    environment:
      - POSTGRES_DB=masterlist_dev
      - POSTGRES_USER=masterlist
      - POSTGRES_PASSWORD=masterlist-dev
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/db:/docker-entrypoint-initdb.d
    networks:
      - masterlist-network
    profiles:
      - with-db

  # Database GUI
  adminer:
    image: adminer:latest
    container_name: masterlist-adminer
    ports:
      - "8082:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - masterlist-network
    profiles:
      - with-db

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: masterlist-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - masterlist-network
    profiles:
      - with-mail

  # Documentation server
  docs:
    image: squidfunk/mkdocs-material:latest
    container_name: masterlist-docs
    ports:
      - "8000:8000"
    volumes:
      - ./:/docs
    command: serve --dev-addr=0.0.0.0:8000
    networks:
      - masterlist-network
    profiles:
      - with-docs

volumes:
  redis-data:
  postgres-data:

networks:
  masterlist-network:
    driver: bridge