generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  password      String
  name          String
  avatar        String?
  role          String          @default("user")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  activities    Activity[]
  comments      Comment[]
  exports       Export[]
  notifications Notification[]
  projects      Project[]
  searches      SearchHistory[]
  sessions      Session[]
  teamMembers   TeamMember[]
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model Project {
  id                  String        @id
  title               String
  problem             String
  solution            String
  category            String
  targetUsers         String
  revenueModel        String
  revenuePotential    String
  developmentTime     String
  competitionLevel    String
  technicalComplexity Float
  qualityScore        Float
  keyFeatures         String
  tags                String
  status              String        @default("active")
  priority            String        @default("medium")
  progress            Int           @default(0)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  ownerId             String?
  activities          Activity[]
  comments            Comment[]
  deployments         Deployment[]
  owner               User?         @relation(fields: [ownerId], references: [id])
  repository          Repository?
  teamProjects        TeamProject[]

  @@index([category])
  @@index([status])
  @@index([qualityScore])
  @@index([priority])
  @@index([progress])
  @@index([ownerId])
}

model Team {
  id          String        @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  activities  Activity[]
  members     TeamMember[]
  projects    TeamProject[]
}

model TeamMember {
  id       String   @id @default(cuid())
  role     String   @default("member")
  joinedAt DateTime @default(now())
  teamId   String
  userId   String
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
}

model TeamProject {
  id         String   @id @default(cuid())
  assignedAt DateTime @default(now())
  status     String   @default("assigned")
  teamId     String
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, projectId])
  @@index([teamId])
  @@index([projectId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  type      String   @default("comment")
  rating    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  userId    String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([userId])
}

model Activity {
  id          String   @id @default(cuid())
  type        String
  description String
  metadata    String?
  createdAt   DateTime @default(now())
  userId      String?
  projectId   String?
  teamId      String?
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  team        Team?    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([projectId])
  @@index([teamId])
  @@index([createdAt])
}

model Export {
  id        String   @id @default(cuid())
  type      String
  format    String
  filename  String
  data      String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
}

model SearchHistory {
  id        String   @id @default(cuid())
  query     String
  filters   String?
  results   Int      @default(0)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([query])
}

model SystemMetric {
  id        String   @id @default(cuid())
  metric    String
  value     Float
  unit      String
  service   String?
  timestamp DateTime @default(now())

  @@index([metric])
  @@index([service])
  @@index([timestamp])
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  read      Boolean  @default(false)
  metadata  String?
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
}

model AIInsight {
  id          String    @id @default(cuid())
  title       String
  description String
  type        String
  confidence  Float
  impact      String
  category    String?
  projectIds  String
  metadata    String?
  generatedAt DateTime  @default(now())
  expiresAt   DateTime?

  @@index([type])
  @@index([impact])
  @@index([category])
  @@index([generatedAt])
}

model Repository {
  id             String          @id @default(cuid())
  projectId      String          @unique
  githubRepoId   String?         @unique
  githubUrl      String?
  githubOwner    String?
  githubName     String?
  defaultBranch  String          @default("main")
  isPrivate      Boolean         @default(true)
  category       String
  subcategory    String?
  repoPath       String          @unique
  localPath      String?
  isCloned       Boolean         @default(false)
  lastSync       DateTime?
  language       String?
  framework      String?
  dependencies   Json?
  codeMetrics    Json?
  status         RepoStatus      @default(NEEDS_SETUP)
  healthScore    Int?
  lastCommit     DateTime?
  commitCount    Int             @default(0)
  templateUsed   String?
  isTemplate     Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  codeAnalyses   CodeAnalysis[]
  deployments    Deployment[]
  webhooks       GitHubWebhook[]
  project        Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  repositoryTags RepositoryTag[]

  @@index([category])
  @@index([subcategory])
  @@index([status])
  @@index([healthScore])
  @@index([isTemplate])
  @@index([repoPath])
}

model CodeAnalysis {
  id                   String       @id @default(cuid())
  repositoryId         String
  linesOfCode          Int?
  fileCount            Int?
  directoryCount       Int?
  complexity           Int?
  testCoverage         Float?
  codeQuality          Float?
  maintainabilityIndex Float?
  vulnerabilities      Json?
  codeSmells           Int?
  duplications         Float?
  technicalDebt        Int?
  dependencies         Json?
  outdatedDeps         Json?
  securityIssues       Json?
  licenseIssues        Json?
  bundleSize           Int?
  loadTime             Float?
  analyzer             String
  analysisType         AnalysisType @default(FULL)
  analyzedAt           DateTime     @default(now())
  repository           Repository   @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@index([repositoryId])
  @@index([analyzedAt])
  @@index([codeQuality])
}

model RepositoryTag {
  id           String     @id @default(cuid())
  repositoryId String
  name         String
  value        String?
  type         TagType    @default(CUSTOM)
  createdAt    DateTime   @default(now())
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@unique([repositoryId, name])
  @@index([repositoryId])
  @@index([type])
}

model RepositoryTemplate {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String
  category      String
  subcategory   String?
  githubUrl     String
  defaultBranch String   @default("main")
  setupSteps    Json
  requirements  Json
  variables     Json
  usageCount    Int      @default(0)
  rating        Float?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([category])
  @@index([isActive])
  @@index([usageCount])
}

model GitHubWebhook {
  id            String      @id @default(cuid())
  repositoryId  String?
  webhookId     String      @unique
  secret        String
  events        Json
  isActive      Boolean     @default(true)
  lastDelivery  DateTime?
  deliveryCount Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  repository    Repository? @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@index([repositoryId])
  @@index([isActive])
}

model Deployment {
  id              String             @id @default(cuid())
  projectId       String
  repositoryId    String?
  platform        DeploymentPlatform
  platformId      String
  platformUrl     String?
  environmentName String             @default("production")
  branch          String             @default("main")
  domain          String?
  customDomains   Json?
  status          DeploymentStatus   @default(PENDING)
  health          DeploymentHealth   @default(UNKNOWN)
  isActive        Boolean            @default(true)
  deploymentUrl   String?
  previewUrl      String?
  buildCommand    String?
  installCommand  String?
  outputDirectory String?
  buildTime       Int?
  responseTime    Float?
  uptime          Float?
  errorRate       Float?
  bandwidth       BigInt?
  storage         BigInt?
  executions      Int?
  lastDeployedAt  DateTime?
  lastCheckedAt   DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  buildLogs       BuildLog[]
  project         Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  repository      Repository?        @relation(fields: [repositoryId], references: [id])
  deploymentEnvs  DeploymentEnv[]
  deploymentLogs  DeploymentLog[]
  incidents       Incident[]

  @@unique([platform, platformId])
  @@index([projectId])
  @@index([repositoryId])
  @@index([platform])
  @@index([status])
  @@index([health])
  @@index([environmentName])
}

model DeploymentLog {
  id           String     @id @default(cuid())
  deploymentId String
  type         LogType
  level        LogLevel
  message      String
  metadata     Json?
  source       String?
  requestId    String?
  timestamp    DateTime   @default(now())
  deployment   Deployment @relation(fields: [deploymentId], references: [id], onDelete: Cascade)

  @@index([deploymentId])
  @@index([type])
  @@index([level])
  @@index([timestamp])
}

model DeploymentEnv {
  id           String     @id @default(cuid())
  deploymentId String
  key          String
  value        String
  isSecret     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deployment   Deployment @relation(fields: [deploymentId], references: [id], onDelete: Cascade)

  @@unique([deploymentId, key])
  @@index([deploymentId])
}

model BuildLog {
  id            String      @id @default(cuid())
  deploymentId  String
  buildId       String      @unique
  commitSha     String?
  commitMessage String?
  status        BuildStatus @default(BUILDING)
  startedAt     DateTime
  completedAt   DateTime?
  duration      Int?
  logs          String?
  errorMessage  String?
  warnings      Json?
  artifactSize  BigInt?
  fileCount     Int?
  createdAt     DateTime    @default(now())
  deployment    Deployment  @relation(fields: [deploymentId], references: [id], onDelete: Cascade)

  @@index([deploymentId])
  @@index([status])
  @@index([startedAt])
}

model Incident {
  id               String           @id @default(cuid())
  deploymentId     String
  title            String
  description      String?
  severity         IncidentSeverity
  status           IncidentStatus   @default(OPEN)
  affectedServices Json?
  impactedUsers    Int?
  errorCount       Int?
  resolvedAt       DateTime?
  resolvedBy       String?
  resolution       String?
  detectedAt       DateTime         @default(now())
  acknowledgedAt   DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  deployment       Deployment       @relation(fields: [deploymentId], references: [id], onDelete: Cascade)

  @@index([deploymentId])
  @@index([severity])
  @@index([status])
  @@index([detectedAt])
}

model PlatformCredential {
  id             String             @id @default(cuid())
  userId         String
  platform       DeploymentPlatform @unique
  apiKey         String?
  apiSecret      String?
  accessToken    String?
  refreshToken   String?
  accountId      String?
  region         String?
  projectPrefix  String?
  tokenExpiresAt DateTime?
  scope          String?
  isActive       Boolean            @default(true)
  lastUsedAt     DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@index([platform])
  @@index([isActive])
}

model DeploymentTemplate {
  id             String             @id @default(cuid())
  name           String             @unique
  description    String
  platform       DeploymentPlatform
  buildConfig    Json
  envTemplate    Json
  domainConfig   Json?
  cacheConfig    Json?
  cdnConfig      Json?
  securityConfig Json?
  usageCount     Int                @default(0)
  isPublic       Boolean            @default(false)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@index([platform])
  @@index([isPublic])
}

model BatchJob {
  id             String                  @id @default(cuid())
  type           String
  status         JobStatus               @default(PENDING)
  metadata       Json?
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  repositoryLogs RepositoryCreationLog[]

  @@index([type])
  @@index([status])
}

model RepositoryCreationLog {
  id           String   @id @default(cuid())
  batchJobId   String
  projectId    String
  projectTitle String
  status       String
  message      String?
  error        String?
  createdAt    DateTime @default(now())
  batchJob     BatchJob @relation(fields: [batchJobId], references: [id], onDelete: Cascade)

  @@index([batchJobId])
  @@index([projectId])
  @@index([status])
}

enum RepoStatus {
  ACTIVE
  ARCHIVED
  NEEDS_SETUP
  ERROR
  SYNCING
  TEMPLATE
}

enum AnalysisType {
  FULL
  QUICK
  SECURITY
  DEPENDENCIES
}

enum TagType {
  FRAMEWORK
  LANGUAGE
  CATEGORY
  DEPLOYMENT
  CUSTOM
}

enum DeploymentPlatform {
  VERCEL
  NETLIFY
  AWS_AMPLIFY
  CLOUDFLARE_PAGES
  GITHUB_PAGES
  HEROKU
  DIGITAL_OCEAN
  RENDER
  RAILWAY
  FLY_IO
  CUSTOM
}

enum DeploymentStatus {
  PENDING
  BUILDING
  DEPLOYING
  READY
  ERROR
  CANCELLED
  SUSPENDED
}

enum DeploymentHealth {
  HEALTHY
  DEGRADED
  UNHEALTHY
  UNKNOWN
}

enum LogType {
  DEPLOYMENT
  BUILD
  RUNTIME
  ERROR
  ACCESS
  PERFORMANCE
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
  FATAL
}

enum BuildStatus {
  QUEUED
  BUILDING
  SUCCEEDED
  FAILED
  CANCELLED
  TIMEOUT
}

enum IncidentSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IncidentStatus {
  OPEN
  ACKNOWLEDGED
  INVESTIGATING
  RESOLVED
  CLOSED
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}
