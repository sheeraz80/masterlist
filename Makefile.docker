# Docker Makefile for Masterlist
# Usage: make -f Makefile.docker <command>

.PHONY: help up down restart logs shell test clean build

# Default environment
ENV ?= development
COMPOSE_FILE = docker-compose.yml

# Set compose file based on environment
ifeq ($(ENV),development)
	COMPOSE_FILE = docker-compose.yml -f docker-compose.dev.yml
else ifeq ($(ENV),production)
	COMPOSE_FILE = docker-compose.yml
endif

help: ## Show this help message
	@echo 'Usage: make -f Makefile.docker [target] [ENV=development|production]'
	@echo ''
	@echo 'Targets:'
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  %-15s %s\n", $$1, $$2}' $(MAKEFILE_LIST)

up: ## Start all services
	docker-compose -f $(COMPOSE_FILE) up -d
	@echo "✅ Services started. Access at http://localhost:5000"

down: ## Stop all services
	docker-compose -f $(COMPOSE_FILE) down
	@echo "✅ Services stopped"

restart: ## Restart all services
	docker-compose -f $(COMPOSE_FILE) restart
	@echo "✅ Services restarted"

logs: ## View logs (use SERVICE=web to view specific service)
	docker-compose -f $(COMPOSE_FILE) logs -f $(SERVICE)

shell: ## Open shell in web container
	docker-compose -f $(COMPOSE_FILE) exec web bash

test: ## Run tests in container
	docker-compose -f $(COMPOSE_FILE) exec web pytest tests/ -v

clean: ## Clean up containers, volumes, and images
	docker-compose -f $(COMPOSE_FILE) down -v --rmi local
	@echo "✅ Cleaned up Docker resources"

build: ## Build Docker images
	docker-compose -f $(COMPOSE_FILE) build --no-cache
	@echo "✅ Images built"

# Development specific commands
dev-up: ## Start development environment with all features
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml --profile with-db --profile with-mail up -d
	@echo "✅ Development environment started"
	@echo "  - Web: http://localhost:5000"
	@echo "  - Redis Commander: http://localhost:8081"
	@echo "  - Jupyter: http://localhost:8888"
	@echo "  - Adminer: http://localhost:8082"
	@echo "  - Mailhog: http://localhost:8025"

dev-jupyter: ## Open Jupyter Lab
	open http://localhost:8888 || xdg-open http://localhost:8888

# Data management
backup: ## Backup data to host
	@mkdir -p backups
	docker-compose -f $(COMPOSE_FILE) exec web tar -czf - projects.json project_tags.json data/ > backups/backup_$(shell date +%Y%m%d_%H%M%S).tar.gz
	@echo "✅ Backup created in backups/"

restore: ## Restore data from backup (use BACKUP=filename)
	@test -n "$(BACKUP)" || (echo "❌ Please specify BACKUP=filename" && exit 1)
	docker cp backups/$(BACKUP) masterlist-web:/tmp/backup.tar.gz
	docker-compose -f $(COMPOSE_FILE) exec web tar -xzf /tmp/backup.tar.gz
	@echo "✅ Restored from $(BACKUP)"

# Utility commands
ps: ## Show running containers
	docker-compose -f $(COMPOSE_FILE) ps

stats: ## Show container resource usage
	docker stats --no-stream

health: ## Check service health
	@curl -s http://localhost:5000/health | jq . || echo "❌ Service not healthy"

# Quality checks
lint: ## Run linting in container
	docker-compose -f $(COMPOSE_FILE) exec web black --check .
	docker-compose -f $(COMPOSE_FILE) exec web flake8 .

format: ## Format code in container
	docker-compose -f $(COMPOSE_FILE) exec web black .
	docker-compose -f $(COMPOSE_FILE) exec web isort . --profile black

# Reports and analytics
reports: ## Generate all reports
	docker-compose -f $(COMPOSE_FILE) exec web python analytics/report_generator.py all
	@echo "✅ Reports generated in data/reports/"

insights: ## Generate AI insights
	docker-compose -f $(COMPOSE_FILE) exec web python insights/ai_insights.py --generate-all
	@echo "✅ Insights generated"

quality: ## Run quality checks
	docker-compose -f $(COMPOSE_FILE) exec web python qa/validation_system.py --run-all
	@echo "✅ Quality checks completed"