name: Deploy

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment"
        # Add actual deployment commands here
        # Example: kubectl apply -f k8s/staging/
    
    - name: Run smoke tests
      run: |
        echo "üß™ Running smoke tests"
        # Add smoke test commands
        # Example: curl -f https://staging.masterlist.app/health
    
    - name: Notify deployment
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: '‚úÖ Deployed to staging environment'
          });

  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Create release backup
      run: |
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        echo "Creating pre-deployment backup: backup_${TIMESTAMP}"
        # Add backup commands
    
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment"
        # Add actual deployment commands here
        # Example: kubectl apply -f k8s/production/
    
    - name: Run health checks
      run: |
        echo "üè• Running health checks"
        # Add health check commands
        # Example: curl -f https://masterlist.app/health
    
    - name: Create GitHub release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        generate_release_notes: true
        files: |
          data/reports/*.json
          data/reports/*.md

  rollback:
    runs-on: ubuntu-latest
    if: failure()
    needs: [deploy-staging, deploy-production]
    
    steps:
    - name: Initiate rollback
      run: |
        echo "‚ùå Deployment failed, initiating rollback"
        # Add rollback commands
    
    - name: Notify team
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'üö® Deployment Failed - Rollback Initiated',
            body: `Deployment to ${context.job} failed.\n\n[View Failed Run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`,
            labels: ['deployment', 'critical']
          });