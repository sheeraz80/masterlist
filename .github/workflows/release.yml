name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - uses: actions/checkout@v3
    
    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        
        # Validate version format
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          exit 1
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "📦 Releasing version: $VERSION"

  build-and-test:
    needs: validate-version
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install wheel setuptools build
    
    - name: Run full test suite
      run: |
        chmod +x scripts/ci/test-runner.sh
        ./scripts/ci/test-runner.sh
    
    - name: Build Python package
      run: |
        python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

  build-docker:
    needs: [validate-version, build-and-test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-version.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        labels: |
          org.opencontainers.image.version=${{ needs.validate-version.outputs.version }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-release:
    needs: [validate-version, build-and-test, build-docker]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
    
    - name: Generate release notes
      id: release_notes
      run: |
        # Get previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Generate changelog
        if [[ -n "$PREV_TAG" ]]; then
          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md
          
          # Get commit messages
          git log --pretty=format:"* %s (%an)" $PREV_TAG..HEAD >> release_notes.md
          
          echo "" >> release_notes.md
          echo "## Statistics" >> release_notes.md
          echo "" >> release_notes.md
          
          # Get statistics
          COMMITS=$(git rev-list --count $PREV_TAG..HEAD)
          FILES=$(git diff --name-only $PREV_TAG..HEAD | wc -l)
          ADDITIONS=$(git diff --numstat $PREV_TAG..HEAD | awk '{sum+=$1} END {print sum}')
          DELETIONS=$(git diff --numstat $PREV_TAG..HEAD | awk '{sum+=$2} END {print sum}')
          
          echo "* **Commits**: $COMMITS" >> release_notes.md
          echo "* **Files Changed**: $FILES" >> release_notes.md
          echo "* **Additions**: +$ADDITIONS" >> release_notes.md
          echo "* **Deletions**: -$DELETIONS" >> release_notes.md
        else
          echo "## Initial Release" > release_notes.md
          echo "" >> release_notes.md
          echo "First release of Masterlist!" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo "pip install masterlist==${{ needs.validate-version.outputs.version }}" >> release_notes.md
        echo '```' >> release_notes.md
        
        echo "" >> release_notes.md
        echo "## Docker" >> release_notes.md
        echo "" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-version.outputs.version }}" >> release_notes.md
        echo '```' >> release_notes.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate-version.outputs.version }}
        name: Release ${{ needs.validate-version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: |
          dist/*
          data/reports/*.json
          data/reports/*.md

  deploy-staging:
    needs: create-release
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to staging
      run: |
        chmod +x scripts/ci/deploy.sh
        ./scripts/ci/deploy.sh staging ${{ needs.validate-version.outputs.version }}
      env:
        DEPLOY_HOST: ${{ secrets.STAGING_HOST }}
        DEPLOY_USER: ${{ secrets.STAGING_USER }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

  deploy-production:
    needs: [create-release, deploy-staging]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production
      run: |
        chmod +x scripts/ci/deploy.sh
        ./scripts/ci/deploy.sh production ${{ needs.validate-version.outputs.version }}
      env:
        DEPLOY_HOST: ${{ secrets.PRODUCTION_HOST }}
        DEPLOY_USER: ${{ secrets.PRODUCTION_USER }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Update documentation
      run: |
        # Update version in documentation
        sed -i "s/version: .*/version: ${{ needs.validate-version.outputs.version }}/" docs/conf.py
        
        # Commit if changed
        if [[ -n $(git status -s) ]]; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/conf.py
          git commit -m "docs: Update version to ${{ needs.validate-version.outputs.version }}"
          git push
        fi